1,解析json文件  obj = JSON.parse(fs.readFileSync(tmpjson, 'utf8'));

2,导出所有包含的模块的端口表（包括自定义的模块）const portmaps = order_ports(obj);
主要是将用户自己编写的模块导入(新导入的内容键和值一样)
portmaps 的类型如下
{
    '$mux': { A: 'in0', B: 'in1', S: 'sel', Y: 'out' },
    '$dff': { CLK: 'clk', D: 'in', Q: 'out' },
    '$dffe': { CLK: 'clk', EN: 'en', D: 'in', Q: 'out' },
    '$adff': { CLK: 'clk', ARST: 'arst', D: 'in', Q: 'out' },
    '$adffe': { CLK: 'clk', EN: 'en', ARST: 'arst', D: 'in', Q: 'out' },
    '$sdff': { CLK: 'clk', SRST: 'srst', D: 'in', Q: 'out' },
    '$sdffe': { CLK: 'clk', EN: 'en', SRST: 'srst', D: 'in', Q: 'out' },
    '$sdffce': { CLK: 'clk', EN: 'en', SRST: 'srst', D: 'in', Q: 'out' },
    '$dlatch': { EN: 'en', D: 'in', Q: 'out' },
    '$adlatch': { EN: 'en', ARST: 'arst', D: 'in', Q: 'out' },
    '$dffsr': { CLK: 'clk', SET: 'set', CLR: 'clr', D: 'in', Q: 'out' },
    '$dffsre': { CLK: 'clk', EN: 'en', SET: 'set', CLR: 'clr', D: 'in', Q: 'out' },
    '$aldff': { CLK: 'clk', ALOAD: 'aload', AD: 'ain', D: 'in', Q: 'out' },
    '$aldffe': { CLK: 'clk', EN: 'en', ALOAD: 'aload', AD: 'ain', D: 'in', Q: 'out' },
    '$sr': { SET: 'set', CLR: 'clr', Q: 'out' },
    '$fsm': { ARST: 'arst', CLK: 'clk', CTRL_IN: 'in', CTRL_OUT: 'out' },
    'UserModule': { clk: 'clk', rst: 'rst', in: 'in', out: 'out' },
    ...
}

3,得到各个模块的表 const out = yosys_to_digitaljs(obj, portmaps, options);
out 的类型如下 其中out[name] = yosys_to_digitaljs_mod(name, mod, portmaps, options);
{
    'top': { module: , .... },
    'module': {...},
    ...
}
    yosys_to_digitaljs_mod 解析单个模块中各个组成部分以及属性



